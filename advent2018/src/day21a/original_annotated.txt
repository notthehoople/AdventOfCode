#ip 1
seti 123 0 5        - 0: set reg5 to 123
bani 5 456 5        - 1: bitwise AND of reg5 against 456 (72)
eqri 5 72 5         - 2: checks that reg5 is 72
addr 5 1 1          - 3: if 72, then adds 1 to the instruction pointer and skips the endless loop
seti 0 0 1          - 4: set reg1 to 0 (goto 1)
seti 0 9 5          - 5: clears reg5
bori 5 65536 2      - 6: bitwise OR of reg5 (current 0) and 65536. Stores it in reg2
seti 7571367 9 5    - 7: sets reg5 to 7571367
bani 2 255 4        - 8: bitwise AND of reg2 against 255. Stores it in reg4
addr 5 4 5          - 9: adds reg4 to reg5
bani 5 16777215 5   - 10: bitwise AND of reg5 and 16777215. Stores in reg5
muli 5 65899 5      - 11: multiplies reg5 to 65899. stores in reg5
bani 5 16777215 5   - 12: bitwise AND of reg5 and 16777215. Stores in reg5
gtir 256 2 4        - 13: if 256 is greater than reg2, reg 4 is set to 1 otherwise 0
addr 4 1 1          - 14: Adds reg4 to instruction pointer so if 256 > reg2 we skip next instruction (addi 1 1 1)
addi 1 1 1          - 15: add 1 to reg1 (goto 17)
seti 27 1 1         - 16: set reg 1 to 27 (goto 28)
seti 0 2 4          - 17: set reg4 to 0
addi 4 1 3          - 18: add 1 to reg4 and store in reg3
muli 3 256 3        - 19: multiply reg3 by 256
gtrr 3 2 3          - 20: if reg3 > reg2 then reg3 = 1 else reg3 = 0
addr 3 1 1          - 21: add reg3 to reg1 (if reg3 > reg2 goto 23 else goto 22)
addi 1 1 1          - 22: add 1 to reg1 (goto 24)
seti 25 6 1         - 23: set reg1 to 25 (goto 25)
addi 4 1 4          - 24: add 1 to reg4
seti 17 8 1         - 25: set reg1 to 17 (goto 18)
setr 4 6 2          - 26: set reg2 to value of reg4
seti 7 4 1          - 27: sets instruction pointer to 7 (goto 8)
eqrr 5 0 4          - 28: if reg5 == reg0 then reg4 = 1 otherwise reg4 = 0
addr 4 1 1          - 29: add reg4 to reg1. So if reg5 == reg0 END
seti 5 5 1          - 30: set reg1 to 5 (goto 6)
